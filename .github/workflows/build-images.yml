name: Build and Publish Docker Images

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: packages/backend/Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        
    - name: Make Backend image public
      run: |
        # Set package visibility to public
        curl -X PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/user/packages/container/$(echo "${{ env.IMAGE_NAME_BACKEND }}" | tr '[:upper:]' '[:lower:]' | sed 's/.*\///') \
          -d '{"visibility":"public"}' || echo "Failed to make package public, it may already be public or this may be expected"

  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: packages/frontend/Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        
    - name: Make Frontend image public
      run: |
        # Set package visibility to public
        curl -X PATCH \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/user/packages/container/$(echo "${{ env.IMAGE_NAME_FRONTEND }}" | tr '[:upper:]' '[:lower:]' | sed 's/.*\///') \
          -d '{"visibility":"public"}' || echo "Failed to make package public, it may already be public or this may be expected"

  test-simple-deployment:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Test simple deployment (build from source)
      run: |
        # Copy simple deployment files
        cp docker-compose.simple.yml docker-compose.test.yml
        cp .env.simple .env
        
        # Set test environment variables
        sed -i 's/your_news_api_key_here/test-key/g' .env
        sed -i 's/your_guardian_api_key_here/test-key/g' .env
        sed -i 's/your_geocoding_api_key_here/test-key/g' .env
        sed -i 's/your_openai_api_key_here/test-key/g' .env
        sed -i 's/your_secure_postgres_password_here/test-password/g' .env
        sed -i 's/your_secure_redis_password_here/test-password/g' .env
        sed -i 's/your-very-secure-jwt-secret-at-least-32-characters-long/test-jwt-secret-for-testing-purposes-only/g' .env
        
        # Start services (build from source)
        docker-compose -f docker-compose.test.yml up -d postgres redis --build
        
        # Wait for services
        sleep 30
        
        # Test database connection
        docker-compose -f docker-compose.test.yml exec -T postgres pg_isready -U news_map_user
        
        # Test redis connection
        docker-compose -f docker-compose.test.yml exec -T redis redis-cli -a test-password ping
        
        # Cleanup
        docker-compose -f docker-compose.test.yml down -v

  test-image-accessibility:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Test image pulling
      run: |
        echo "Testing if images are publicly accessible..."
        
        # Wait a moment for images to be available
        sleep 30
        
        # Test backend image
        echo "Testing backend image..."
        docker pull ghcr.io/${{ github.repository }}-backend:latest || echo "Backend image pull failed"
        
        # Test frontend image  
        echo "Testing frontend image..."
        docker pull ghcr.io/${{ github.repository }}-frontend:latest || echo "Frontend image pull failed"
        
        # List pulled images
        docker images | grep ghcr.io

  test-minimal-deployment:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Test minimal deployment with pre-built images
      run: |
        # Wait for images to be available
        sleep 60
        
        # Copy minimal files
        cp docker-compose.minimal.yml docker-compose.test-minimal.yml
        cp .env.minimal .env
        
        # Set test environment variables
        sed -i 's/your-news-api-key-here/test-key/g' .env
        sed -i 's/your-guardian-api-key-here/test-key/g' .env
        sed -i 's/your-geocoding-api-key-here/test-key/g' .env
        sed -i 's/your-openai-api-key-here/test-key/g' .env
        sed -i 's/change_this_to_a_secure_password/test-password/g' .env
        sed -i 's/change-this-to-a-very-secure-secret-at-least-32-characters-long/test-jwt-secret-for-testing-purposes-only/g' .env
        
        # Test pulling images
        echo "Testing image accessibility..."
        docker pull ghcr.io/${{ github.repository }}-backend:latest
        docker pull ghcr.io/${{ github.repository }}-frontend:latest
        
        # Start minimal services
        docker-compose -f docker-compose.test-minimal.yml up -d postgres redis
        
        # Wait for services
        sleep 30
        
        # Test database connection
        docker-compose -f docker-compose.test-minimal.yml exec -T postgres pg_isready -U news_map_user
        
        # Test redis connection
        docker-compose -f docker-compose.test-minimal.yml exec -T redis redis-cli -a test-password ping
        
        # Cleanup
        docker-compose -f docker-compose.test-minimal.yml down -v
        
        echo "âœ… Minimal deployment test completed successfully!"